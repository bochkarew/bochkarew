package lesson5;

import java.util.Arrays;

public class StringLesson {
    public static void main(String[] args) {
        // char (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö) 16 –±–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª Unicode
        // –æ—Ç 0 –¥–æ 65536 / '\u0000' –¥–æ '\uffff'

        char char1 = 'J'; // —Å–∞–º —Å–∏–º–≤–æ–ª
        char char2 = 74; // –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ J
        char char3 = '\u0044'; // 16—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ escape
         // –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        System.out.print(char1); // J
        System.out.print(char2); // J
        System.out.print(char3); // D

        System.out.println("\n–°—Ç—Ä–æ–∫–∏");

        // –°—Ç—Ä–æ–∫–∞ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç—Ä–æ–∫–∞ - —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø, —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ String
        // –°—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è:
        // 1. –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        // 2. new String() - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        // —á–µ—Ä–µ–∑ "" –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        // –°—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã, –º–æ–∂–Ω–æ –ª–∏—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ
        // —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        System.out.println("–°—Ç—Ä–æ–∫–æ–≤–æ–π –ª–∏—Ç–µ—Ä–∞–ª");

        char[] chars = {'\u004A', '\u004A', '\u0044'};
        String jjdString = new String(chars);
        System.out.println(jjdString); // JJD
        System.out.println(jjdString.length()); // 3

        char[] chars1 = {'\uD83D', '\uDC38'}; // —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è –ø–∞—Ä–∞ —á–∞—Ä–æ–≤
        String frogString = new String(chars1);
        System.out.println(frogString); // üê∏
        System.out.println(frogString.length()); // 2
        System.out.println(frogString.codePoints().count()); // 1

        // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–æ JAVA 9: –º–∞—Å—Å–∏–≤ char[] –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-16
        // –∫–∞–∂–¥—ã–π —á–∞—Ä –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–≤—É–º—è –±–∞–π—Ç–∞–º–∏

        // –ù–∞—á–∏–Ω–∞—è —Å 9 –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–æ–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
        // —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤ byte[] + –∫–æ–¥–∏—Ä–æ–≤–∫–∞ LATIN1 –∏–ª–∏ UTF-16

        // –ü—É–ª —Å—Ç—Ä–æ–∫ —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞
        // –ü—É–ª —Å—Ç—Ä–æ–∫: "–°—Ç—Ä–æ–∫–∞" "–°—Ç—Ä–æ–∫–∞4" "–°—Ç—Ä–æ–∫–∞44"

        // "–°—Ç—Ä–æ–∫–∞" (heap –ø–∞–º—è—Ç—å)
        String string1 = "–°—Ç—Ä–æ–∫–∞";
        String string2 = "–°—Ç—Ä–æ–∫–∞";

        String string3 = new String("–°—Ç—Ä–æ–∫–∞");
        // string3 —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ "–°—Ç—Ä–æ–∫–∞" –≤–Ω–µ –ø—É–ª–∞

        System.out.println(string1 == string2); // true
        System.out.println(string1 == string3); // false

        String internString = string3.intern();
        // internString —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ "–°—Ç—Ä–æ–∫–∞" –∏–∑ –ø—É–ª–∞

        string1 = "–°—Ç—Ä–æ–∫–∞";
        string2 = "–°—Ç—Ä–æ–∫–∞";

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ equals
        // –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º == , —Ç–∫ == —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏

        System.out.println(string1.equals(string2)); // true
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2)); // false
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equalsIgnoreCase(string2)); // true

        string2 = null;

        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2));
        // System.out.println(string2.equals("—Å—Ç—Ä–æ–∫–∞")); // NullPointerException

        System.out.println(string2 == null); // true
        System.out.println(string2 != null); // false

        string1 = "Java";
        string2 = "Python";

        // –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
        String concatString = string1 + " :: " + string2;
        System.out.println(concatString);

        concatString = string1.concat(" :: ").concat(string2);
        // Java ::
        // Java :: Python

        concatString = String.join(" :: ", string1, string2, string3);

        concatString = "";
        for (int i = 0; i < 10; i += 1) {
            concatString += i + " ";
        }
        System.out.println(concatString);

        // StringBuilder - —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
        // StringBuffer - –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π

        string1 = "Java";
        string2 = "Python";
        concatString = "–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ ";
        StringBuilder sb = new StringBuilder(concatString);
        sb.append(string1).append(" :: ").append(string2);

        StringBuilder sb2 = new StringBuilder();
        for (int i = 0; i < 10; i += 1) {
            sb2.append(i).append(" ");
        }
        System.out.println(sb2);

        String sbString = sb2.toString();
        System.out.println(sbString);

        // –º–µ—Ç–æ–¥ split()
        String langs = "Java, Python, JavaScript";
        String[] langArr = langs.split(", ");
        System.out.println(Arrays.toString(langArr));

        // –º–µ—Ç–æ–¥—ã –∑–∞–º–µ–Ω—ã // Java, Python, JavaScript
        String newString = langs.replaceAll(", ", " - ");
        System.out.println(newString);

        newString = langs.replaceFirst(", ", " - ");
        System.out.println(newString);

        newString = langs.replace(", ", " - ");
        System.out.println(newString);

        System.out.println(langs.contains("th")); // true
        System.out.println(langs.startsWith("java")); // false
        System.out.println(langs.endsWith("Script")); // true

        System.out.println(langs.startsWith("av", 1)); // true















































    }
}
